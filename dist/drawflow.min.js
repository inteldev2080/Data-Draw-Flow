export default class Drawflow{constructor(e){this.container=e,this.precanvas=null,this.nodeId=1,this.ele_selected=null,this.node_selected=null,this.drag=!1,this.editor_selected=!1,this.connection=!1,this.connection_ele=null,this.connection_selected=null,this.canvas_x=0,this.canvas_y=0,this.pos_x=0,this.pos_y=0,this.mouse_x=0,this.mouse_y=0,this.line_path=5,this.first_click=null,this.select_elements=null,this.drawflow={drawflow:{Home:{data:{}}}},this.zoom=1,this.zoom_max=1.6,this.zoom_min=.5,this.evCache=new Array,this.prevDiff=-1}start(){this.container.classList.add("parent-drawflow"),this.precanvas=document.createElement("div"),this.precanvas.classList.add("drawflow"),this.container.appendChild(this.precanvas),this.container.addEventListener("mouseup",this.dragEnd.bind(this)),this.container.addEventListener("mousemove",this.position.bind(this)),this.container.addEventListener("mousedown",this.click.bind(this)),this.container.addEventListener("touchend",this.dragEnd.bind(this)),this.container.addEventListener("touchmove",this.position.bind(this)),this.container.addEventListener("touchstart",this.click.bind(this)),this.container.addEventListener("contextmenu",this.contextmenu.bind(this)),window.addEventListener("keyup",this.key.bind(this)),this.container.addEventListener("wheel",this.zoom_enter.bind(this)),this.container.addEventListener("input",this.updateNodeValue.bind(this)),this.container.onpointerdown=this.pointerdown_handler.bind(this),this.container.onpointermove=this.pointermove_handler.bind(this),this.container.onpointerup=this.pointerup_handler.bind(this),this.container.onpointercancel=this.pointerup_handler.bind(this),this.container.onpointerout=this.pointerup_handler.bind(this),this.container.onpointerleave=this.pointerup_handler.bind(this),this.load()}pointerdown_handler(e){this.evCache.push(e)}pointermove_handler(e){for(var t=0;t<this.evCache.length;t++)if(e.pointerId==this.evCache[t].pointerId){this.evCache[t]=e;break}if(2==this.evCache.length){var s=Math.abs(this.evCache[0].clientX-this.evCache[1].clientX);this.prevDiff>100&&(s>this.prevDiff&&this.zoom_in(),s<this.prevDiff&&this.zoom_out()),this.prevDiff=s}}pointerup_handler(e){this.remove_event(e),this.evCache.length<2&&(this.prevDiff=-1)}remove_event(e){for(var t=0;t<this.evCache.length;t++)if(this.evCache[t].pointerId==e.pointerId){this.evCache.splice(t,1);break}}load(){for(var e in this.drawflow.drawflow.Home.data)this.addNodeImport(this.drawflow.drawflow.Home.data[e],this.precanvas),this.nodeId=e+1;for(var e in this.drawflow.drawflow.Home.data)this.updateConnectionNodes("node-"+e)}click(e){switch(this.first_click=e.target,this.ele_selected=e.target,0===e.button&&this.contextmenuDel(),null!=e.target.closest(".drawflow_content_node")&&(this.ele_selected=e.target.closest(".drawflow_content_node").parentElement),this.ele_selected.classList[0]){case"drawflow-node":null!=this.node_selected&&this.node_selected.classList.remove("selected"),null!=this.connection_selected&&(this.connection_selected.classList.remove("selected"),this.connection_selected=null),this.node_selected=this.ele_selected,this.node_selected.classList.add("selected"),this.drag=!0;break;case"output":this.connection=!0,null!=this.node_selected&&(this.node_selected.classList.remove("selected"),this.node_selected=null),null!=this.connection_selected&&(this.connection_selected.classList.remove("selected"),this.connection_selected=null),this.drawConnection(e.target);break;case"parent-drawflow":case"drawflow":null!=this.node_selected&&(this.node_selected.classList.remove("selected"),this.node_selected=null),null!=this.connection_selected&&(this.connection_selected.classList.remove("selected"),this.connection_selected=null),this.editor_selected=!0;break;case"main-path":null!=this.node_selected&&(this.node_selected.classList.remove("selected"),this.node_selected=null),null!=this.connection_selected&&(this.connection_selected.classList.remove("selected"),this.connection_selected=null),this.connection_selected=this.ele_selected,this.connection_selected.classList.add("selected");break;case"drawflow-delete":this.node_selected&&this.removeNodeId(this.node_selected.id),this.connection_selected&&this.removeConnection(),null!=this.node_selected&&(this.node_selected.classList.remove("selected"),this.node_selected=null),null!=this.connection_selected&&(this.connection_selected.classList.remove("selected"),this.connection_selected=null)}"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY)}position(e){if("touchmove"===e.type)var t=e.touches[0].clientX,s=e.touches[0].clientY;else t=e.clientX,s=e.clientY;if(this.connection&&this.updateConnection(t,s),this.editor_selected&&(n=this.canvas_x+-(this.pos_x-t),i=this.canvas_y+-(this.pos_y-s),this.precanvas.style.transform="translate("+n+"px, "+i+"px) scale("+this.zoom+")"),this.drag){var n=(this.pos_x-t)*this.precanvas.clientWidth/(this.precanvas.clientWidth*this.zoom),i=(this.pos_y-s)*this.precanvas.clientHeight/(this.precanvas.clientHeight*this.zoom);this.pos_x=t,this.pos_y=s,this.ele_selected.style.top=this.ele_selected.offsetTop-i+"px",this.ele_selected.style.left=this.ele_selected.offsetLeft-n+"px",this.drawflow.drawflow.Home.data[this.ele_selected.id.slice(5)].pos_x=this.ele_selected.offsetLeft-n,this.drawflow.drawflow.Home.data[this.ele_selected.id.slice(5)].pos_y=this.ele_selected.offsetTop-i,this.updateConnectionNodes(this.ele_selected.id,t,s)}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}dragEnd(e){if(null!=this.select_elements&&(this.select_elements.remove(),this.select_elements=null),"touchend"===e.type)var t=this.mouse_x,s=this.mouse_y,n=document.elementFromPoint(t,s);else t=e.clientX,s=e.clientY,n=e.target;if(this.editor_selected&&(this.canvas_x=this.canvas_x+-(this.pos_x-t),this.canvas_y=this.canvas_y+-(this.pos_y-s),this.editor_selected=!1),!0===this.connection)if("input"===n.classList[0]){var i=this.ele_selected.parentElement.parentElement.id,o=this.ele_selected.classList[1],l=n.parentElement.parentElement.id,c=n.classList[1];if(0===this.container.querySelectorAll(".connection.node_in_"+l+".node_out_"+i+"."+o+"."+c).length){this.connection_ele.classList.add("node_in_"+l),this.connection_ele.classList.add("node_out_"+i),this.connection_ele.classList.add(o),this.connection_ele.classList.add(c);var a=l.slice(5),d=i.slice(5);this.drawflow.drawflow.Home.data[d].outputs[o].connections.push({node:a,output:c}),this.drawflow.drawflow.Home.data[a].inputs[c].connections.push({node:d,input:o}),this.connection_ele=null}else this.connection_ele.remove(),this.connection_ele=null}else this.connection_ele.remove(),this.connection_ele=null;this.drag=!1,this.connection=!1,this.ele_selected=null,this.editor_selected=!1}contextmenu(e){if(e.preventDefault(),this.precanvas.getElementsByClassName("drawflow-delete").length&&this.precanvas.getElementsByClassName("drawflow-delete")[0].remove(),this.node_selected||this.connection_selected){var t=document.createElement("div");t.classList.add("drawflow-delete"),t.innerHTML="x",this.node_selected&&this.node_selected.appendChild(t),this.connection_selected&&(t.style.top=e.clientY*(this.precanvas.clientHeight/(this.precanvas.clientHeight*this.zoom))-this.precanvas.getBoundingClientRect().y*(this.precanvas.clientHeight/(this.precanvas.clientHeight*this.zoom))+"px",t.style.left=e.clientX*(this.precanvas.clientWidth/(this.precanvas.clientWidth*this.zoom))-this.precanvas.getBoundingClientRect().x*(this.precanvas.clientWidth/(this.precanvas.clientWidth*this.zoom))+"px",this.precanvas.appendChild(t))}}contextmenuDel(){this.precanvas.getElementsByClassName("drawflow-delete").length&&this.precanvas.getElementsByClassName("drawflow-delete")[0].remove()}key(e){"Delete"===e.key&&(null!=this.node_selected&&"INPUT"!==this.first_click.tagName&&"TEXTAREA"!==this.first_click.tagName&&this.removeNodeId(this.node_selected.id),null!=this.connection_selected&&this.removeConnection())}zoom_enter(e,t){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.precanvas.style.transform="translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")"}zoom_in(){this.zoom<this.zoom_max&&(this.zoom+=.1,this.zoom_refresh())}zoom_out(){this.zoom>this.zoom_min&&(this.zoom-=.1,this.zoom_refresh())}zoom_reset(){1!=this.zoom&&(this.zoom=1,this.zoom_refresh())}drawConnection(e){var t=document.createElementNS("http://www.w3.org/2000/svg","svg");this.connection_ele=t;var s=document.createElementNS("http://www.w3.org/2000/svg","path");s.classList.add("main-path"),s.setAttributeNS(null,"d",""),t.classList.add("connection"),t.appendChild(s),this.precanvas.appendChild(t)}updateConnection(e,t){var s=this.connection_ele.children[0],n=this.ele_selected.offsetWidth/2+this.line_path/2+this.ele_selected.parentElement.parentElement.offsetLeft+this.ele_selected.offsetLeft,i=this.ele_selected.offsetHeight/2+this.line_path/2+this.ele_selected.parentElement.parentElement.offsetTop+this.ele_selected.offsetTop,o=e*(this.precanvas.clientWidth/(this.precanvas.clientWidth*this.zoom))-this.precanvas.getBoundingClientRect().x*(this.precanvas.clientWidth/(this.precanvas.clientWidth*this.zoom)),l=t*(this.precanvas.clientHeight/(this.precanvas.clientHeight*this.zoom))-this.precanvas.getBoundingClientRect().y*(this.precanvas.clientHeight/(this.precanvas.clientHeight*this.zoom)),c=n+.5*Math.abs(o-n),a=o-.5*Math.abs(o-n);s.setAttributeNS(null,"d","M "+n+" "+i+" C "+c+" "+i+" "+a+" "+l+" "+o+"  "+l)}updateConnectionNodes(e){const t="node_in_"+e,s="node_out_"+e;var n=this.line_path/2;const i=document.getElementsByClassName(s);Object.keys(i).map(function(t,s){var o=document.getElementById(e),l=i[t].classList[1].replace("node_in_",""),c=document.getElementById(l).querySelectorAll("."+i[t].classList[4])[0],a=c.offsetWidth/2+n+c.parentElement.parentElement.offsetLeft+c.offsetLeft,d=c.offsetHeight/2+n+c.parentElement.parentElement.offsetTop+c.offsetTop,h=o.offsetLeft+o.querySelectorAll("."+i[t].classList[3])[0].offsetLeft+o.querySelectorAll("."+i[t].classList[3])[0].offsetWidth/2+n,r=o.offsetTop+o.querySelectorAll("."+i[t].classList[3])[0].offsetTop+o.querySelectorAll("."+i[t].classList[3])[0].offsetHeight/2+n,p=a,u=d,f=h+.5*Math.abs(p-h),m=p-.5*Math.abs(p-h);i[t].children[0].setAttributeNS(null,"d","M "+h+" "+r+" C "+f+" "+r+" "+m+" "+u+" "+p+"  "+u)});const o=document.getElementsByClassName(t);Object.keys(o).map(function(t,s){var i=document.getElementById(e),l=o[t].classList[2].replace("node_out_",""),c=document.getElementById(l).querySelectorAll("."+o[t].classList[3])[0],a=c.offsetWidth/2+n+c.parentElement.parentElement.offsetLeft+c.offsetLeft,d=c.offsetHeight/2+n+c.parentElement.parentElement.offsetTop+c.offsetTop,h=i.offsetLeft+i.querySelectorAll("."+o[t].classList[4])[0].offsetLeft+i.querySelectorAll("."+o[t].classList[4])[0].offsetWidth/2+n,r=i.offsetTop+i.querySelectorAll("."+o[t].classList[4])[0].offsetTop+i.querySelectorAll("."+o[t].classList[4])[0].offsetHeight/2+n,p=a+.5*Math.abs(h-a),u=h-.5*Math.abs(h-a);o[t].children[0].setAttributeNS(null,"d","M "+a+" "+d+" C "+p+" "+d+" "+u+" "+r+" "+h+"  "+r)})}addNode(e,t,s,n,i,o,l,c){const a=document.createElement("div");a.classList.add("parent-node");const d=document.createElement("div");d.innerHTML="",d.setAttribute("id","node-"+this.nodeId),d.classList.add("drawflow-node"),""!=o&&d.classList.add(o);const h=document.createElement("div");h.classList.add("inputs");const r=document.createElement("div");r.classList.add("outputs");const p={};for(var u=0;u<t;u++){const e=document.createElement("div");e.classList.add("input"),e.classList.add("input_"+(u+1)),p["input_"+(u+1)]={connections:[]},h.appendChild(e)}const f={};for(u=0;u<s;u++){const e=document.createElement("div");e.classList.add("output"),e.classList.add("output_"+(u+1)),f["output_"+(u+1)]={connections:[]},r.appendChild(e)}const m=document.createElement("div");m.classList.add("drawflow_content_node"),m.innerHTML=c,Object.entries(l).forEach(function(e,t){if("object"==typeof e[1])!function e(t,s,n){if(null===t)var t=l[s];else var t=t[s];Object.entries(t).forEach(function(i,o){if("object"==typeof i[1])e(t,i[0],s+"-"+i[0]);else for(var l=m.querySelectorAll("[df-"+n+"-"+i[0]+"]"),c=0;c<l.length;c++)l[c].value=i[1]})}(null,e[0],e[0]);else for(var s=m.querySelectorAll("[df-"+e[0]+"]"),n=0;n<s.length;n++)s[n].value=e[1]}),d.appendChild(h),d.appendChild(m),d.appendChild(r),d.style.top=i+"px",d.style.left=n+"px",a.appendChild(d),this.precanvas.appendChild(a);var _={id:this.nodeId,name:e,data:l,class:o,html:c,inputs:p,outputs:f,pos_x:n,pos_y:i};this.drawflow.drawflow.Home.data[this.nodeId]=_,this.nodeId++}addNodeImport(e,t){const s=document.createElement("div");s.classList.add("parent-node");const n=document.createElement("div");n.innerHTML="",n.setAttribute("id","node-"+e.id),n.classList.add("drawflow-node"),""!=e.class&&n.classList.add(e.class);const i=document.createElement("div");i.classList.add("inputs");const o=document.createElement("div");o.classList.add("outputs"),Object.keys(e.inputs).map(function(s,n){const o=document.createElement("div");o.classList.add("input"),o.classList.add(s),i.appendChild(o),Object.keys(e.inputs[s].connections).map(function(n,i){var o=document.createElementNS("http://www.w3.org/2000/svg","svg"),l=document.createElementNS("http://www.w3.org/2000/svg","path");l.classList.add("main-path"),l.setAttributeNS(null,"d",""),o.classList.add("connection"),o.classList.add("node_in_node-"+e.id),o.classList.add("node_out_node-"+e.inputs[s].connections[n].node),o.classList.add(e.inputs[s].connections[n].input),o.classList.add(s),o.appendChild(l),t.appendChild(o)})});for(var l=0;l<Object.keys(e.outputs).length;l++){const e=document.createElement("div");e.classList.add("output"),e.classList.add("output_"+(l+1)),o.appendChild(e)}const c=document.createElement("div");c.classList.add("drawflow_content_node"),c.innerHTML=e.html,Object.entries(e.data).forEach(function(t,s){if("object"==typeof t[1])!function t(s,n,i){if(null===s)var s=e.data[n];else var s=s[n];Object.entries(s).forEach(function(e,o){if("object"==typeof e[1])t(s,e[0],n+"-"+e[0]);else for(var l=c.querySelectorAll("[df-"+i+"-"+e[0]+"]"),a=0;a<l.length;a++)l[a].value=e[1]})}(null,t[0],t[0]);else for(var n=c.querySelectorAll("[df-"+t[0]+"]"),i=0;i<n.length;i++)n[i].value=t[1]}),n.appendChild(i),n.appendChild(c),n.appendChild(o),n.style.top=e.pos_y+"px",n.style.left=e.pos_x+"px",s.appendChild(n),this.precanvas.appendChild(s)}updateNodeValue(e){for(var t=e.target.attributes,s=0;s<t.length;s++)t[s].nodeName.startsWith("df-")&&(this.drawflow.drawflow.Home.data[e.target.closest(".drawflow_content_node").parentElement.id.slice(5)].data[t[s].nodeName.slice(3)]=e.target.value)}removeNodeId(e){document.getElementById(e).remove(),delete this.drawflow.drawflow.Home.data[e.slice(5)],this.removeConnectionNodeId(e)}removeConnection(){if(null!=this.connection_selected){var e=this.connection_selected.parentElement.classList;this.connection_selected.parentElement.remove();var t=this.drawflow.drawflow.Home.data[e[2].slice(14)].outputs[e[3]].connections.findIndex(function(t,s){return t.node===e[1].slice(13)&&t.output===e[4]});this.drawflow.drawflow.Home.data[e[2].slice(14)].outputs[e[3]].connections.splice(t,1);var s=this.drawflow.drawflow.Home.data[e[1].slice(13)].inputs[e[4]].connections.findIndex(function(t,s){return t.node===e[2].slice(14)&&t.input===e[3]});this.drawflow.drawflow.Home.data[e[1].slice(13)].inputs[e[4]].connections.splice(s,1),this.connection_selected=null}}removeConnectionNodeId(e){const t="node_in_"+e,s="node_out_"+e,n=document.getElementsByClassName(s);for(var i=n.length-1;i>=0;i--){var o=n[i].classList,l=this.drawflow.drawflow.Home.data[o[1].slice(13)].inputs[o[4]].connections.findIndex(function(e,t){return e.node===o[2].slice(14)&&e.input===o[3]});this.drawflow.drawflow.Home.data[o[1].slice(13)].inputs[o[4]].connections.splice(l,1),n[i].remove()}const c=document.getElementsByClassName(t);for(i=c.length-1;i>=0;i--){o=c[i].classList;var a=this.drawflow.drawflow.Home.data[o[2].slice(14)].outputs[o[3]].connections.findIndex(function(e,t){return e.node===o[1].slice(13)&&e.output===o[4]});this.drawflow.drawflow.Home.data[o[2].slice(14)].outputs[o[3]].connections.splice(a,1),c[i].remove()}}clear(){this.precanvas.innerHTML="",this.drawflow={drawflow:{Home:{data:{}}}}}export(){return this.drawflow}import(e){this.clear(),this.drawflow=e,this.load()}}
export default class Drawflow {
  constructor(container) {
    this.container = container;
    this.precanvas = null;
    this.nodeId = 1;
    this.ele_selected = null;
    this.node_selected = null;
    this.drag = false;
    this.editor_selected = false;
    this.connection = false;
    this.connection_ele = null;
    this.connection_selected = null;
    this.canvas_x = 0;
    this.canvas_y = 0;
    this.pos_x = 0;
    this.pos_y = 0;
    this.mouse_x = 0;
    this.mouse_y = 0;
    this.line_path = 5;
    this.first_click = null;

    this.select_elements = null;
    this.drawflow = { "drawflow": { "Home": { "data": {} }}};
    // Configurable options
    this.zoom = 1;
    this.zoom_max = 1.6;
    this.zoom_min = 0.5;

    // Mobile
    this.evCache = new Array();
    this.prevDiff = -1;
  }

  start () {
    // console.info("Start Drawflow!!");
    this.container.classList.add("parent-drawflow");
    this.precanvas = document.createElement('div');
    this.precanvas.classList.add("drawflow");
    this.container.appendChild(this.precanvas);

    /* Mouse and Touch Actions */
    this.container.addEventListener('mouseup', this.dragEnd.bind(this));
    this.container.addEventListener('mousemove', this.position.bind(this));
    this.container.addEventListener('mousedown', this.click.bind(this) );

    this.container.addEventListener('touchend', this.dragEnd.bind(this));
    this.container.addEventListener('touchmove', this.position.bind(this));
    this.container.addEventListener('touchstart', this.click.bind(this));

    /* Context Menu */
    this.container.addEventListener('contextmenu', this.contextmenu.bind(this));
    /* Delete */
    window.addEventListener('keyup', this.key.bind(this));

    /* Zoom Mouse */
    this.container.addEventListener('wheel', this.zoom_enter.bind(this));

    /* Update data Nodes */
    this.container.addEventListener('input', this.updateNodeValue.bind(this));
    /* Mobile zoom */
    this.container.onpointerdown = this.pointerdown_handler.bind(this);
    this.container.onpointermove = this.pointermove_handler.bind(this);
    this.container.onpointerup = this.pointerup_handler.bind(this);
    this.container.onpointercancel = this.pointerup_handler.bind(this);
    this.container.onpointerout = this.pointerup_handler.bind(this);
    this.container.onpointerleave = this.pointerup_handler.bind(this);

    this.load();
  }

  /* Mobile zoom */
  pointerdown_handler(ev) {
   this.evCache.push(ev);
  }

  pointermove_handler(ev) {
   for (var i = 0; i < this.evCache.length; i++) {
     if (ev.pointerId == this.evCache[i].pointerId) {
        this.evCache[i] = ev;
     break;
     }
   }

   if (this.evCache.length == 2) {
     // Calculate the distance between the two pointers
     var curDiff = Math.abs(this.evCache[0].clientX - this.evCache[1].clientX);

     if (this.prevDiff > 100) {
       if (curDiff > this.prevDiff) {
         // The distance between the two pointers has increased

         this.zoom_in();
       }
       if (curDiff < this.prevDiff) {
         // The distance between the two pointers has decreased
         this.zoom_out();
       }
     }
     this.prevDiff = curDiff;
   }
  }

  pointerup_handler(ev) {
    this.remove_event(ev);
    if (this.evCache.length < 2) {
      this.prevDiff = -1;
    }
  }
  remove_event(ev) {
   // Remove this event from the target's cache
   for (var i = 0; i < this.evCache.length; i++) {
     if (this.evCache[i].pointerId == ev.pointerId) {
       this.evCache.splice(i, 1);
       break;
     }
   }
  }
  /* End Mobile Zoom */
  load() {
    for (var key in this.drawflow.drawflow.Home.data) {
      this.addNodeImport(this.drawflow.drawflow.Home.data[key], this.precanvas);
      this.nodeId = key+1;
    }
    for (var key in this.drawflow.drawflow.Home.data) {
      this.updateConnectionNodes('node-'+key);
    }
  }
  click(e) {

    this.first_click = e.target;
    this.ele_selected = e.target;
    if(e.button === 0) {
      this.contextmenuDel();
    }

    if(e.target.closest(".drawflow_content_node") != null) {
      this.ele_selected = e.target.closest(".drawflow_content_node").parentElement;
    }
    switch (this.ele_selected.classList[0]) {
      case 'drawflow-node':
        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }
        this.node_selected = this.ele_selected;
        this.node_selected.classList.add("selected");
        this.drag = true;
        break;
      case 'output':
        this.connection = true;
        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
          this.node_selected = null;
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }
        this.drawConnection(e.target);
        break;
      case 'parent-drawflow':
        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
          this.node_selected = null;
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }
        this.editor_selected = true;
        break;
      case 'drawflow':
        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
          this.node_selected = null;
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }
        this.editor_selected = true;
        break;
      case 'main-path':
        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
          this.node_selected = null;
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }
        this.connection_selected = this.ele_selected;
        this.connection_selected.classList.add("selected");
      break;
      case 'drawflow-delete':
        if(this.node_selected ) {
          this.removeNodeId(this.node_selected.id);
        }

        if(this.connection_selected) {
          this.removeConnection()
        }

        if(this.node_selected != null) {
          this.node_selected.classList.remove("selected");
          this.node_selected = null;
        }
        if(this.connection_selected != null) {
          this.connection_selected.classList.remove("selected");
          this.connection_selected = null;
        }

      break;
      default:
    }
    if (e.type === "touchstart") {
      this.pos_x = e.touches[0].clientX;
      this.pos_y = e.touches[0].clientY;
    } else {
      this.pos_x = e.clientX;
      this.pos_y = e.clientY;
    }
  }

  position(e) {
    if (e.type === "touchmove") {
      var e_pos_x = e.touches[0].clientX;
      var e_pos_y = e.touches[0].clientY;
    } else {
      var e_pos_x = e.clientX;
      var e_pos_y = e.clientY;
    }


    if(this.connection) {
      this.updateConnection(e_pos_x, e_pos_y);
    }
    if(this.editor_selected) {
      /*if (e.ctrlKey) {
        this.selectElements(e_pos_x, e_pos_y);
      } else { */
      x =  this.canvas_x + (-(this.pos_x - e_pos_x))
      y = this.canvas_y + (-(this.pos_y - e_pos_y))
      // console.log(canvas_x +' - ' +pos_x + ' - '+ e_pos_x + ' - ' + x);
      this.precanvas.style.transform = "translate("+x+"px, "+y+"px) scale("+this.zoom+")";
      //}
    }
    if(this.drag) {

      var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);
      var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);
      this.pos_x = e_pos_x;
      this.pos_y = e_pos_y;

      this.ele_selected.style.top = (this.ele_selected.offsetTop - y) + "px";
      this.ele_selected.style.left = (this.ele_selected.offsetLeft - x) + "px";

      this.drawflow.drawflow.Home.data[this.ele_selected.id.slice(5)].pos_x = (this.ele_selected.offsetLeft - x);
      this.drawflow.drawflow.Home.data[this.ele_selected.id.slice(5)].pos_y = (this.ele_selected.offsetTop - y);

      this.updateConnectionNodes(this.ele_selected.id, e_pos_x, e_pos_y)
    }

    if (e.type === "touchmove") {
      this.mouse_x = e_pos_x;
      this.mouse_y = e_pos_y;
    }

  }

  dragEnd(e) {
    if(this.select_elements != null) {
      this.select_elements.remove();
      this.select_elements = null;
    }

    if (e.type === "touchend") {
      var e_pos_x = this.mouse_x;
      var e_pos_y = this.mouse_y;
      var ele_last = document.elementFromPoint(e_pos_x, e_pos_y);
    } else {
      var e_pos_x = e.clientX;
      var e_pos_y = e.clientY;
      var ele_last = e.target;
    }

    if(this.editor_selected) {
      this.canvas_x = this.canvas_x + (-(this.pos_x - e_pos_x));
      this.canvas_y = this.canvas_y + (-(this.pos_y - e_pos_y));
      this.editor_selected = false;
    }
    if(this.connection === true) {
      if(ele_last.classList[0] === 'input') {
        // Fix connection;
        var output_id = this.ele_selected.parentElement.parentElement.id;
        var output_class = this.ele_selected.classList[1];
        var input_id = ele_last.parentElement.parentElement.id;
        var input_class = ele_last.classList[1];

        if(this.container.querySelectorAll('.connection.node_in_'+input_id+'.node_out_'+output_id+'.'+output_class+'.'+input_class).length === 0) {
        // Conection no exist save connection

        this.connection_ele.classList.add("node_in_"+input_id);
        this.connection_ele.classList.add("node_out_"+output_id);
        this.connection_ele.classList.add(output_class);
        this.connection_ele.classList.add(input_class);
        var id_input = input_id.slice(5);
        var id_output = output_id.slice(5);

        this.drawflow.drawflow.Home.data[id_output].outputs[output_class].connections.push( {"node": id_input, "output": input_class});
        this.drawflow.drawflow.Home.data[id_input].inputs[input_class].connections.push( {"node": id_output, "input": output_class});

        this.connection_ele = null;
      } else {
        // Connection exists Remove Connection;
        this.connection_ele.remove();
        this.connection_ele = null;
      }

      } else {
        // Remove Connection;
        this.connection_ele.remove();
        this.connection_ele = null;
      }
    }

    this.drag = false;
    this.connection = false;
    this.ele_selected = null;
    this.editor_selected = false;

  }
  contextmenu(e) {
    e.preventDefault();
    if(this.precanvas.getElementsByClassName("drawflow-delete").length) {
      this.precanvas.getElementsByClassName("drawflow-delete")[0].remove()
    };
    if(this.node_selected || this.connection_selected) {
      var deletebox = document.createElement('div');
      deletebox.classList.add("drawflow-delete");
      deletebox.innerHTML = "x";
      if(this.node_selected) {
        this.node_selected.appendChild(deletebox);

      }
      if(this.connection_selected) {
        deletebox.style.top = e.clientY * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y *  ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) ) + "px";
        deletebox.style.left = e.clientX * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x *  ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) ) + "px";

        this.precanvas.appendChild(deletebox);

      }

    }

  }
  contextmenuDel() {
    if(this.precanvas.getElementsByClassName("drawflow-delete").length) {
      this.precanvas.getElementsByClassName("drawflow-delete")[0].remove()
    };
  }

  key(e) {
    if(e.key === "Delete") {
      if(this.node_selected != null) {
        if(this.first_click.tagName !== 'INPUT' && this.first_click.tagName !== 'TEXTAREA') {
          this.removeNodeId(this.node_selected.id);
        }
      }
      if(this.connection_selected != null) {
        this.removeConnection();
      }
    }
  }

  zoom_enter(event, delta) {
    if (event.ctrlKey) {
      event.preventDefault()
      if(event.deltaY > 0) {
        // Zoom Out
        this.zoom_out();
      } else {
        // Zoom In
        this.zoom_in();
      }
      //this.precanvas.style.transform = "translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")";
    }
  }
  zoom_refresh(){
    this.precanvas.style.transform = "translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")";
  }
  zoom_in() {
    if(this.zoom < this.zoom_max) {
        this.zoom+=0.1;
        this.zoom_refresh();
    }
  }
  zoom_out() {
    if(this.zoom > this.zoom_min) {
      this.zoom-=0.1;
        this.zoom_refresh();
    }
  }
  zoom_reset(){
    if(this.zoom != 1) {
      this.zoom = 1;
      this.zoom_refresh();
    }
  }

  drawConnection(ele) {
    var connection = document.createElementNS('http://www.w3.org/2000/svg',"svg");
    this.connection_ele = connection;
    var path = document.createElementNS('http://www.w3.org/2000/svg',"path");
    path.classList.add("main-path");
    path.setAttributeNS(null, 'd', '');
    // path.innerHTML = 'a';
    connection.classList.add("connection");
    connection.appendChild(path);
    this.precanvas.appendChild(connection);

  }

  updateConnection(eX, eY) {
    var path = this.connection_ele.children[0];

    var line_x = this.ele_selected.offsetWidth/2 + this.line_path/2 + this.ele_selected.parentElement.parentElement.offsetLeft + this.ele_selected.offsetLeft;
    var line_y = this.ele_selected.offsetHeight/2 + this.line_path/2 + this.ele_selected.parentElement.parentElement.offsetTop + this.ele_selected.offsetTop;

    var x = eX * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x *  ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) );
    var y = eY * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y *  ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) );

    var curvature = 0.5;
    var hx1 = line_x + Math.abs(x - line_x) * curvature;
    var hx2 = x - Math.abs(x - line_x) * curvature;

    // path.setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' L '+ x +' '+ y +''); // SIMPLE LINE
    // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );
    path.setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y);
  }

  updateConnectionNodes(id) {
    // Aquí nos quedamos;
    const idSearch = 'node_in_'+id;
    const idSearchOut = 'node_out_'+id;
    var line_path = this.line_path/2;
    const elemsOut = document.getElementsByClassName(idSearchOut);
    Object.keys(elemsOut).map(function(item, index) {

      var elemtsearchId_out = document.getElementById(id);

      var id_search = elemsOut[item].classList[1].replace('node_in_', '');
      var elemtsearchId = document.getElementById(id_search);

      var elemtsearch = elemtsearchId.querySelectorAll('.'+elemsOut[item].classList[4])[0]

      var eX = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;
      var eY = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;

      var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetWidth/2 + line_path;
      var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetHeight/2 + line_path;

      var x = eX;
      var y = eY;

      var curvature = 0.5;
      var hx1 = line_x + Math.abs(x - line_x) * curvature;
      var hx2 = x - Math.abs(x - line_x) * curvature;
      // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );
      elemsOut[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );

    })

    const elems = document.getElementsByClassName(idSearch);
    Object.keys(elems).map(function(item, index) {
      // console.log("In")
      var elemtsearchId_in = document.getElementById(id);

      var id_search = elems[item].classList[2].replace('node_out_', '');
      var elemtsearchId = document.getElementById(id_search);

      var elemtsearch = elemtsearchId.querySelectorAll('.'+elems[item].classList[3])[0]

      var line_x = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;
      var line_y = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;

      var x = elemtsearchId_in.offsetLeft + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetLeft + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetWidth/2 + line_path;
      var y = elemtsearchId_in.offsetTop + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetTop + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetHeight/2 + line_path;

      var curvature = 0.5;
      var hx1 = line_x + Math.abs(x - line_x) * curvature;
      var hx2 = x - Math.abs(x - line_x) * curvature;
      // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );
      elems[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );

    })
  }

  /*selectElements(eX, eY) {
    if(this.select_elements == null) {
      var div = document.createElementNS('http://www.w3.org/2000/svg',"svg");
      this.select_elements = div;
      this.pos_click_x = eX;
      this.pos_click_y = eY;
        var rect = document.createElementNS('http://www.w3.org/2000/svg',"rect");
        rect.setAttributeNS(null, 'd', '');
      // rect.innerHTML = 'a';
      div.classList.add("selectbox");
      div.appendChild(rect);
      this.precanvas.appendChild(div);
    }

    this.select_elements.children[0].setAttributeNS(null, 'x', this.pos_click_x - this.precanvas.offsetLeft - this.canvas_x);
    this.select_elements.children[0].setAttributeNS(null, 'y', this.pos_click_y - this.precanvas.offsetTop - this.canvas_y);
    this.select_elements.children[0].setAttributeNS(null, 'width', eX - this.pos_click_x);
    this.select_elements.children[0].setAttributeNS(null, 'height', eY - this.pos_click_y);
  }*/

  addNode (name, num_in, num_out, ele_pos_x, ele_pos_y, classoverride, data, html) {

    const parent = document.createElement('div');
    parent.classList.add("parent-node");

    const node = document.createElement('div');
    node.innerHTML = "";
    node.setAttribute("id", "node-"+this.nodeId);
    node.classList.add("drawflow-node");
    if(classoverride != '') {
      node.classList.add(classoverride);
    }


    const inputs = document.createElement('div');
    inputs.classList.add("inputs");

    const outputs = document.createElement('div');
    outputs.classList.add("outputs");

    const json_inputs = {}
    for(var x = 0; x < num_in; x++) {
      const input = document.createElement('div');
      input.classList.add("input");
      input.classList.add("input_"+(x+1));
      json_inputs["input_"+(x+1)] = { "connections": []};
      inputs.appendChild(input);
    }

    const json_outputs = {}
    for(var x = 0; x < num_out; x++) {
      const output = document.createElement('div');
      output.classList.add("output");
      output.classList.add("output_"+(x+1));
      json_outputs["output_"+(x+1)] = { "connections": []};
      outputs.appendChild(output);
    }

    const content = document.createElement('div');
    content.classList.add("drawflow_content_node");
    content.innerHTML = html;
    Object.entries(data).forEach(function (key, value) {
      if(typeof key[1] === "object") {
        insertObjectkeys(null, key[0], key[0]);
      } else {
        var elems = content.querySelectorAll('[df-'+key[0]+']');
          for(var i = 0; i < elems.length; i++) {
            elems[i].value = key[1];
          }
      }
    })

    function insertObjectkeys(object, name, completname) {
      if(object === null) {
        var object = data[name];
      } else {
        var object = object[name]
      }
      Object.entries(object).forEach(function (key, value) {
        if(typeof key[1] === "object") {
          insertObjectkeys(object, key[0], name+'-'+key[0]);
        } else {
          var elems = content.querySelectorAll('[df-'+completname+'-'+key[0]+']');
            for(var i = 0; i < elems.length; i++) {
              elems[i].value = key[1];
            }
        }
      });
    }
    node.appendChild(inputs);
    node.appendChild(content);
    node.appendChild(outputs);
    node.style.top = ele_pos_y + "px";
    node.style.left = ele_pos_x + "px";
    parent.appendChild(node);
    this.precanvas.appendChild(parent);
    var json = {
      id: this.nodeId,
      name: name,
      data: data,
      class: classoverride,
      html: html,
      inputs: json_inputs,
      outputs: json_outputs,
      pos_x: ele_pos_x,
      pos_y: ele_pos_y,
    }
    this.drawflow.drawflow.Home.data[this.nodeId] = json;

    this.nodeId++;
  }

  addNodeImport (dataNode, precanvas) {
    const parent = document.createElement('div');
    parent.classList.add("parent-node");

    const node = document.createElement('div');
    node.innerHTML = "";
    node.setAttribute("id", "node-"+dataNode.id);
    node.classList.add("drawflow-node");
    if(dataNode.class != '') {
      node.classList.add(dataNode.class);
    }

    const inputs = document.createElement('div');
    inputs.classList.add("inputs");

    const outputs = document.createElement('div');
    outputs.classList.add("outputs");

    Object.keys(dataNode.inputs).map(function(input_item, index) {
      const input = document.createElement('div');
      input.classList.add("input");
      input.classList.add(input_item);
      inputs.appendChild(input);
      Object.keys(dataNode.inputs[input_item].connections).map(function(output_item, index) {

        var connection = document.createElementNS('http://www.w3.org/2000/svg',"svg");
        var path = document.createElementNS('http://www.w3.org/2000/svg',"path");
        path.classList.add("main-path");
        path.setAttributeNS(null, 'd', '');
        // path.innerHTML = 'a';
        connection.classList.add("connection");
        connection.classList.add("node_in_node-"+dataNode.id);
        connection.classList.add("node_out_node-"+dataNode.inputs[input_item].connections[output_item].node);
        connection.classList.add(dataNode.inputs[input_item].connections[output_item].input);
        connection.classList.add(input_item);

        connection.appendChild(path);
        precanvas.appendChild(connection);

      });
    });


    for(var x = 0; x < Object.keys(dataNode.outputs).length; x++) {
      const output = document.createElement('div');
      output.classList.add("output");
      output.classList.add("output_"+(x+1));
      outputs.appendChild(output);
    }

    const content = document.createElement('div');
    content.classList.add("drawflow_content_node");
    content.innerHTML = dataNode.html;
    Object.entries(dataNode.data).forEach(function (key, value) {
      if(typeof key[1] === "object") {
        insertObjectkeys(null, key[0], key[0]);
      } else {
        var elems = content.querySelectorAll('[df-'+key[0]+']');
          for(var i = 0; i < elems.length; i++) {
            elems[i].value = key[1];
          }
      }
    })

    function insertObjectkeys(object, name, completname) {
      if(object === null) {
        var object = dataNode.data[name];
      } else {
        var object = object[name]
      }
      Object.entries(object).forEach(function (key, value) {
        if(typeof key[1] === "object") {
          insertObjectkeys(object, key[0], name+'-'+key[0]);
        } else {
          var elems = content.querySelectorAll('[df-'+completname+'-'+key[0]+']');
            for(var i = 0; i < elems.length; i++) {
              elems[i].value = key[1];
            }
        }
      });
    }
    node.appendChild(inputs);
    node.appendChild(content);
    node.appendChild(outputs);
    node.style.top = dataNode.pos_y + "px";
    node.style.left = dataNode.pos_x + "px";
    parent.appendChild(node);
    this.precanvas.appendChild(parent);
  }

  updateNodeValue(event) {
    var attr = event.target.attributes
    for(var i= 0; i < attr.length; i++) {
      if(attr[i].nodeName.startsWith('df-')) {
        this.drawflow.drawflow.Home.data[event.target.closest(".drawflow_content_node").parentElement.id.slice(5)].data[attr[i].nodeName.slice(3)] = event.target.value;
      }

    }


  }

  removeNodeId(id) {
    document.getElementById(id).remove();
    delete this.drawflow.drawflow.Home.data[id.slice(5)];
    this.removeConnectionNodeId(id);
  }

  removeConnection() {
    if(this.connection_selected != null) {
      var listclass = this.connection_selected.parentElement.classList;
      this.connection_selected.parentElement.remove();

      var index_out = this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {
        return item.node === listclass[1].slice(13) && item.output === listclass[4]
      });
      this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);

      var index_in = this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {
        return item.node === listclass[2].slice(14) && item.input === listclass[3]
      });
      this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);

      this.connection_selected = null;
    }
  }

  removeConnectionNodeId(id) {
    const idSearchIn = 'node_in_'+id;
    const idSearchOut = 'node_out_'+id;

    const elemsOut = document.getElementsByClassName(idSearchOut);
    for(var i = elemsOut.length-1; i >= 0; i--) {

      var listclass = elemsOut[i].classList;
      /*
      var index_out = this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {
        return item.node === listclass[1].slice(13) && item.output === listclass[4]
      });
      this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);
      */
      var index_in = this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {
        return item.node === listclass[2].slice(14) && item.input === listclass[3]
      });
      this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);

      elemsOut[i].remove();
    }

    const elemsIn = document.getElementsByClassName(idSearchIn);
    for(var i = elemsIn.length-1; i >= 0; i--) {

      var listclass = elemsIn[i].classList;

      var index_out = this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {
        return item.node === listclass[1].slice(13) && item.output === listclass[4]
      });
      this.drawflow.drawflow.Home.data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);
      /*
      var index_in = this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {
        return item.node === listclass[2].slice(14) && item.input === listclass[3]
      });
      this.drawflow.drawflow.Home.data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);
      */
      elemsIn[i].remove();
    }
  }
  clear () {
    this.precanvas.innerHTML = "";
    this.drawflow = { "drawflow": { "Home": { "data": {} }}};
  }
  export () {
    return this.drawflow;
  }

  import (data) {
    this.clear();
    this.drawflow = data;
    this.load();
  }
}
